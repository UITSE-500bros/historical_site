name: Build and Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Build"]
    types: [completed]
    branches: [main]

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend-app:latest

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './be_historicalsite/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./be_historicalsite
        run: npm ci
      
      - name: Run backend tests
        working-directory: ./be_historicalsite
        run: npm run test
  build-and-deploy:
    name: Build and Deploy Both Services
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker --version
          docker compose --version

      - name: Create .env file
        run: |
          cat > .env <<EOF
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          EOF

      - name: Build and start both services
        run: docker compose up -d --build

      - name: Wait for backend to be up
        run: |
          echo "Waiting for backend to start..."
          max_retries=2
          retry_interval=30
          for i in $(seq 1 $max_retries); do
            if curl -s http://localhost:8888/health | grep -q 'ok'; then
              echo "✅ Backend is up!"
              backend_status="success"
              break
            else
              echo "⏳ $i/$max_retries: Waiting $retry_interval seconds..."
              sleep $retry_interval
            fi
          done

          if [ "$backend_status" != "success" ]; then
            echo "❌ Backend failed to start."
            docker compose logs backend
            exit 1
          fi

      - name: Wait for frontend to be up
        run: |
          echo "Waiting for frontend to start..."
          max_retries=2
          retry_interval=10
          for i in $(seq 1 $max_retries); do
            if curl -s http://localhost:3000/health | grep -q 'ok'; then
              echo "✅ Frontend is up!"
              frontend_status="success"
              break
            else
              echo "⏳ $i/$max_retries: Waiting $retry_interval seconds..."
              sleep $retry_interval
            fi
          done

          if [ "$frontend_status" != "success" ]; then
            echo "❌ Frontend failed to start."
             logs frontend
            exit 1
          fi

      - name: Post deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend: http://localhost:8888" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend: http://localhost:3000" >> $GITHUB_STEP_SUMMARY
