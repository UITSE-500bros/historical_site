name: Build and Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'be_historicalsite/**'
  workflow_run:
    workflows: ["Build"]
    types: [completed]
    branches: [main]

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend-app:latest

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './be_historicalsite/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./be_historicalsite
        run: npm ci
      
      - name: Run backend tests
        working-directory: ./be_historicalsite
        run: npm run test
  
  build-and-deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./be_historicalsite
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ env.DOCKER_IMAGE }}
              ports:
                - "8888:8888"
              environment:
                - DATABASE_URL=${{ secrets.DATABASE_URL }}
                - SMTP_USER=${{ secrets.SMTP_USER }}
                - SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
                - SUPABASE_URL=${{ secrets.SUPABASE_URL }}
                - SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
                - S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
                - STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
                - FRONTEND_URL=${{ secrets.FRONTEND_URL }}
              restart: always
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
                interval: 10s
                timeout: 5s
                retries: 3
                start_period: 5s
          EOF
      
      - name: Start backend
        run: docker compose up -d
      
      - name: Wait for backend to be up
        run: |
          echo "Waiting for backend to start..."
          max_retries=12
          retry_interval=10
          
          for i in $(seq 1 $max_retries); do
            if curl -s http://localhost:8888/health | grep -q 'ok'; then
              echo "✅ Backend is up and running!"
              backend_status="success"
              break
            else
              echo "⏳ Attempt $i/$max_retries: Backend not ready yet, waiting $retry_interval seconds..."
              sleep $retry_interval
            fi
          done
          
          if [ "$backend_status" != "success" ]; then
            echo "❌ Backend failed to start within the expected time"
            docker compose logs
            exit 1
          fi
      
      - name: Post deployment summary
        if: always()
        run: |
          echo "## Backend Deployment Status" >> $GITHUB_STEP_SUMMARY
          if [ "$backend_status" == "success" ]; then
            echo "✅ Backend successfully deployed" >> $GITHUB_STEP_SUMMARY
            echo "🔗 Backend URL: http://localhost:8888" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
